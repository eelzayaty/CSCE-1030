display method:
- use nested for-loop to check through every instance in the array that is passed as an argument
- use row and col variables as arguments to make sure we only print the size that the user is playing with

check repeat method:
- pass a 2d boolean array of the same size, where true means it has been guessed already
- if the value in the boolean array is true at the given coordinates, return true

initialize method:
- if x is at default value:
	- parse through each value in the array and set to -1
- else
	- parse through each value in the array and set to a random integer

is wrong format method:
- use .find('@') to make sure the provided string has an @ and store the index of it
- then make sure it has a '.' using .find('.') and store the index
- use dotIndex - atIndex to make sure there is at least one character between @ and .
- erase indexes of @ and . from the string and then parse through to make sure the rest of it is alphanumeric

main method:
- create numArray and dispArray with 10 rows and 10 columns each (using the rows and cols constants)
- use a do-while loop to get user email
- use another do-while loop to make sure the user enters a valid size for the arrays
	- use an if-else to make sure that the number of rows and columns is between 1-10
- initialize both arrays and the points value
- use a do-while loop to repeat the game
	- prompt user to enter coordinates to reveal, and copy the value at numArray[x][y] to dispArray[x][y]
		- and set checkArr[x][y] to true
	- ask user to guess matching coordinates
		- make sure coordinates havent been revealed already using checkRepeat()
	- if values match, add 2 points and copy the guessed coordinates in numArray to dispArray
	- else, remove a point
	- if user has 0 points, give suitable message and break from loop
	- otherwise, prompt user if they would like to guess again (y/n)
- inform user of their point total
//end
